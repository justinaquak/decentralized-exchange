// FULL ORDER

// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const buyTokenMarket = await dexContract.connect(actor).buyTokenMarket(goldAddress, silverAddress, 100, 1000);
// await buyTokenMarket.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenMarket = await dexContract.connect(owner).sellTokenMarket(goldAddress, silverAddress, 100, 1000);
// await sellTokenMarket.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// FULL EXCESS

// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenMarket = await dexContract.connect(owner).sellTokenMarket(goldAddress, silverAddress, 200, 1000);
// await sellTokenMarket.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// PARTIAL ORDER - LESS THAN

// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 50, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await silverContract.balanceOf(contractAddress)
// console.log(contractBalance)

// CANCEL REMAINING ORDER
// const cancelOrder = await dexContract.connect(owner).cancelUserSellOrder(silverAddress, owner.address, 100, 1000);
// await cancelOrder.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await silverContract.balanceOf(contractAddress)
// console.log(contractBalance)

// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 50, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await goldContract.balanceOf(contractAddress)
// console.log(contractBalance)

// CANCEL REMAINING ORDER
// const cancelOrder = await dexContract.connect(actor).cancelUserBuyOrder(silverAddress, actor.address, 100, 1000);
// await cancelOrder.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await goldContract.balanceOf(contractAddress)
// console.log(contractBalance)

// PARTIAL ORDER - MORE THAN

// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 130, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// CANCEL REMAINING ORDER
// const cancelOrder = await dexContract.connect(actor).cancelUserBuyOrder(silverAddress, actor.address, 100, 1000);
// await cancelOrder.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await goldContract.balanceOf(contractAddress)
// console.log(contractBalance)

// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 170, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await silverContract.balanceOf(contractAddress)
// console.log(contractBalance)

// CANCEL REMAINING ORDER
// const cancelOrder = await dexContract.connect(owner).cancelUserSellOrder(silverAddress, owner.address, 100, 1000);
// await cancelOrder.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await silverContract.balanceOf(contractAddress)
// console.log(contractBalance)

// MULTIPLE ORDERS OF THE DIFFERENT PRICE -> issue with numerical gold
// const buyTokenLimit1 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 70, 100, 1000);
// await buyTokenLimit1.wait()
// const buyTokenLimit2 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 60, 100, 1000);
// await buyTokenLimit2.wait()
// const buyTokenLimit3 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit3.wait()
// const buyTokenLimit4 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 40, 100, 1000);
// await buyTokenLimit4.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenLimit1 = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 80, 50, 1000);
// await sellTokenLimit1.wait()
// const sellTokenLimit2 = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 60, 150, 1000);
// await sellTokenLimit2.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// MULTIPLE ORDERS OF THE SAME PRICE
// const buyTokenLimit1 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit1.wait()
// const buyTokenLimit2 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 60, 1000);
// await buyTokenLimit2.wait()
// const buyTokenLimit3 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 50, 1000);
// await buyTokenLimit3.wait()
// const buyTokenLimit4 = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 70, 1000);
// await buyTokenLimit4.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenLimit1 = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 50, 1000);
// await sellTokenLimit1.wait()
// const sellTokenLimit2 = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 150, 1000);
// await sellTokenLimit2.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// BATCH EXECUTION
// const buyTokenLimit = await dexContract.connect(owner).buyTokenLimit(goldAddress, silverAddress, 10, 10, 100);
// await buyTokenLimit.wait()
// const buyTokenLimit1 = await dexContract.connect(actor).buyTokenLimit(silverAddress, bronzeAddress, 1, 100, 10);
// await buyTokenLimit1.wait()
// const buyTokenLimit2 = await dexContract.connect(third).buyTokenLimit(bronzeAddress, goldAddress, 100, 1, 1);
// await buyTokenLimit2.wait()

// const buyTokenLimit = await dexContract.connect(owner).buyTokenLimit(goldAddress, silverAddress, 10, 10, 100);
// await buyTokenLimit.wait()
// const buyTokenLimit1 = await dexContract.connect(owner).buyTokenLimit(goldAddress, silverAddress, 10, 30, 100);
// await buyTokenLimit1.wait()
// const buyTokenLimit2 = await dexContract.connect(owner).buyTokenLimit(goldAddress, silverAddress, 10, 20, 100);
// await buyTokenLimit2.wait()
// const buyTokenLimit3 = await dexContract.connect(actor).buyTokenLimit(silverAddress, bronzeAddress, 1, 100, 10);
// await buyTokenLimit3.wait()
// const buyTokenLimit4 = await dexContract.connect(actor).buyTokenLimit(silverAddress, bronzeAddress, 1, 150, 10);
// await buyTokenLimit4.wait()
// const buyTokenLimit5 = await dexContract.connect(actor).buyTokenLimit(silverAddress, bronzeAddress, 1, 150, 10);
// await buyTokenLimit5.wait()
// const buyTokenLimit6 = await dexContract.connect(third).buyTokenLimit(bronzeAddress, goldAddress, 100, 2, 1);
// await buyTokenLimit6.wait()

// const batchExecution = await dexContract.batchExecutionBuy(goldAddress, silverAddress, bronzeAddress);
// await batchExecution.wait()