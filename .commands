// FULL ORDER

// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const buyTokenMarket = await dexContract.connect(actor).buyTokenMarket(goldAddress, silverAddress, 100, 1000);
// await buyTokenMarket.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenMarket = await dexContract.connect(owner).sellTokenMarket(goldAddress, silverAddress, 100, 1000);
// await sellTokenMarket.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// FULL EXCESS

// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenMarket = await dexContract.connect(owner).sellTokenMarket(goldAddress, silverAddress, 200, 1000);
// await sellTokenMarket.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// PARTIAL ORDER - LESS THAN

// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 50, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await silverContract.balanceOf(contractAddress)
// console.log(contractBalance)

// CANCEL REMAINING ORDER
// const cancelOrder = await dexContract.connect(owner).cancelUserSellOrder(silverAddress, owner.address, 100, 1000);
// await cancelOrder.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await silverContract.balanceOf(contractAddress)
// console.log(contractBalance)

// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 50, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await goldContract.balanceOf(contractAddress)
// console.log(contractBalance)

// CANCEL REMAINING ORDER
// const cancelOrder = await dexContract.connect(actor).cancelUserBuyOrder(silverAddress, actor.address, 100, 1000);
// await cancelOrder.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await goldContract.balanceOf(contractAddress)
// console.log(contractBalance)

// PARTIAL ORDER - MORE THAN

// const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
// await sellTokenLimit.wait()
// const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders1)
// console.log('\nSILVER SELL\n', silverSellOrders1)
// const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 130, 1000);
// await buyTokenLimit.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)

// CANCEL REMAINING ORDER
// const cancelOrder = await dexContract.connect(actor).cancelUserBuyOrder(silverAddress, actor.address, 100, 1000);
// await cancelOrder.wait()
// const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
// const silverSellOrders = await dexContract.getSellOrders(silverAddress);
// console.log('\nSILVER BUY\n', silverBuyOrders)
// console.log('\nSILVER SELL\n', silverSellOrders)
// const contractBalance = await goldContract.balanceOf(contractAddress)
// console.log(contractBalance)

const buyTokenLimit = await dexContract.connect(actor).buyTokenLimit(goldAddress, silverAddress, 100, 100, 1000);
await buyTokenLimit.wait()
const silverBuyOrders1 = await dexContract.getBuyOrders(silverAddress);
const silverSellOrders1 = await dexContract.getSellOrders(silverAddress);
console.log('\nSILVER BUY\n', silverBuyOrders1)
console.log('\nSILVER SELL\n', silverSellOrders1)
const sellTokenLimit = await dexContract.connect(owner).sellTokenLimit(goldAddress, silverAddress, 100, 170, 1000);
await sellTokenLimit.wait()
const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
const silverSellOrders = await dexContract.getSellOrders(silverAddress);
console.log('\nSILVER BUY\n', silverBuyOrders)
console.log('\nSILVER SELL\n', silverSellOrders)
const contractBalance = await silverContract.balanceOf(contractAddress)
console.log(contractBalance)

CANCEL REMAINING ORDER
const cancelOrder = await dexContract.connect(actor).cancelUserBuyOrder(silverAddress, actor.address, 100, 1000);
await cancelOrder.wait()
const silverBuyOrders = await dexContract.getBuyOrders(silverAddress);
const silverSellOrders = await dexContract.getSellOrders(silverAddress);
console.log('\nSILVER BUY\n', silverBuyOrders)
console.log('\nSILVER SELL\n', silverSellOrders)
const contractBalance = await goldContract.balanceOf(contractAddress)
console.log(contractBalance)